#!/bin/bash
set -e

printHelp() {
	if [ "$1" = "design" ]; then
		printDesign
		return
	fi

	cat <<-EOF
	pkgit: a git-based (personal) package manager

	pkgit help                // short help (this screen)
	pkgit help design         // long form design do

	pkgit repogit ...         // git command in the install repo
	pkgit ...                 // git command in the package repo

	pkgit [build]             // build reusing prior script
	pkgit build [SCRIPT|REF]  // build from explicit script
	pkgit build-script [REF]  // dump build script

	pkgit upgrade             // build and install
	pkgit install             // install built package
	pkgit link                // link built package variant

	pkgit vars                // dump package variables
	pkgit rm                  // remove pakage git repo
	pkgit truncate            // truncate package git repo history
	pkgit clean               // cleanup build artifacts

	EOF
}

printDesign() {
	cat <<-EOF
	pkgit: a git-based (personal) package manager

	# The Short

	To a first approximation pkgit is "just" a wrapper for (a specially
	configured) git with a "build" and "install" command tacked on:
	- cp pkgit \$HOME/bin/pkgit # or \$HOME/.local/bin/pkgit to taste
	- cd path/to/source/tree/for/thing
	- pkgit # build is the default command
	- pkgit install

	# The Long

	pkgit is designed to manage some \$PREFIX, while its primary intention is
	to manage \$HOME/.local, it can in principle work for other things like
	/usr/local.

	\$PREFIX will be managed as a git repository; if it isn't one already,
	pkgit will initialize it.  Packages each get their own sub-repository under
	\$PREFIX/.git/pkg/NAME.

	Each package seb-repo is a a bare git repository with no objects of its own
	(all objects are stored in \$PREFIX/.git/objects).  Build related
	artifacts, mostly temporary in nature, are stored under the package
	sub-repo.

	Builds are done under \$PREFIX/.git/pkg/NAME/{build,install}-VERSION:
	- build-VERSION SHOULD serve as an out-of-tree build directory
	- install-VERSION serves as the working tree
	- the contents of the install-VERSION working tree is then comitted to a
	  branch in the package's repository, and a NAME-VERSION tag is created
	  in the \$PREFIX repository

	The first time a package is built, the user is dropped into an interactive
	shell to perform the build.  After the user exits that shell, their history
	is recorded as a build script for next time.  The contents of the
	install-VERSION directory are committed, along with the build script, into
	a branch in the package sub-repo.  Users may optionally provide an initial
	build script to avoid the interactive process.

	Subsequent builds are then primed by using the build script recorded in the
	last commit.  Whenever a build script is used (either recovered from prior
	commit, or given by the user to \`pkgit build ...\`), the user is presented
	with it in their \$EDITOR.  The user has a chance to instrument the build
	script with interactive shell "breakpoints".  Just like the initial
	interactive shell, any history within these breakpoints is recorded for
	inclusion in the resulting build script.

	Installs are done by merging a built tag into \$PREFIX; however the user
	can just as easily \`cd \$PREFIX\` git-around themselves; pkgit currently
	add most of its value during the above build phase, and generally
	managing each package's sub-repository. NOTE/TODO: merging already
	large-ish branches together into an even bigger working tree may quickly
	known scaling limit in git; because of this, and also to ease things like
	up/down-grades the user and/or pkgit itself should explore using \`git
	submodule\` rather than the current tree-grafting approach.

	## Variants

	TODO explain this in longer form, basically it's multiple branches within
	the sub-repo, keyed off some extracted version component from the source
	tree; e.g. to separate python2 and python3.

	# Inspiration / Motivation:

	- inspired by [A Crude Personal Package Manager](http://nullprogram.com/blog/2018/03/27/)
	- pkgit set(s) out to be "A Less Crude Personal Package Manager"
	- in other words, this grew out of my initial "tar(balls)?!? who uses
	  tar(balls) in 2018? Software comes through git, and git can manage the
	  installed artifacts better to boot!" reaction to reading said blog post.
	EOF
}

die() {
	echo "$@" >&2
	exit 1
}

inspectPackage() {
	local pkghead pkgremote pkgdesc pkgsubj

	SRCDIR=$1
	PKGNAME=$(basename "$SRCDIR")
	PKGDIR=$PKGREPO/pkg/$PKGNAME

	pkghead=$(basename "$(git --git-dir="$SRCDIR/.git" symbolic-ref HEAD 2>/dev/null)") || true
	pkgbranch=${pkghead:-master}

	pkgremote=$(git --git-dir="$SRCDIR/.git" config "branch.$pkgbranch.remote" 2>/dev/null) || true
	while [ "$pkgremote" == "." ] ; do
		merge=$(git config branch."$pkgbranch".merge)
		pkgbranch=${merge##*/}
		pkgremote=$(git --git-dir="$SRCDIR/.git" config "branch.$pkgbranch.remote" 2>/dev/null) || true
	done

	PKGURL=$(git --git-dir="$SRCDIR/.git" config "remote.${pkgremote:-origin}.url")
	PKGREV=$(git --git-dir="$SRCDIR/.git" rev-parse HEAD)

	pkgdesc=$(
		git --git-dir="$SRCDIR/.git" describe "$PKGREV" 2>/dev/null ||
		git --git-dir="$SRCDIR/.git" describe --tags "$PKGREV" 2>/dev/null)
	# || git --git-dir="$SRCDIR/.git" describe --all --always "$PKGREV"
	pkgdesc=${pkgdesc##*/}

	PKGBUILT=
	if pkgsubj=$(pkgit show -s --pretty='%s' 2>/dev/null) && [[ $pkgsubj = Built\ * ]]; then
		PKGBUILT=${pkgsubj#* }
	fi

	# TODO may need to allow per-package customization
	PKGVERSION=${pkgdesc#${pkgdesc/[0-9]*/}}
	case "$PKGVERSION" in
	*-*-g*)
		PKGVARIANT=devel
		;;
	[0-9]*.*.*)
		PKGVARIANT=${PKGVERSION%.*}
		;;
	*)
		PKGVARIANT=$PKGVERSION
	esac

	PREFIX=$PKGROOT/$PKGNAME/$PKGVARIANT
	PKGREF="refs/heads/$PKGNAME-$PKGVARIANT"
}

lookupPackage() {
	local argname argvariant
	argname=$1
	argvariant=$2
	PKGDIR=$PKGREPO/pkg/$argname

	if [ -z "$argvariant" ]; then
		PKGREF=$(pkgit symbolic-ref HEAD)
	else
		PKGREF="refs/heads/$argname-$argvariant"
	fi

	eval "$(pkgit show -s --pretty=%B "$PKGREF" | parsePackageCommit)"
	if [ "$PKGNAME" != "$argname" ]; then
		die "parsed package name ($PKGNAME) doesn't match given name ($argname)"
	fi
	if [ -n "$argvariant" ] && [ "$PKGVARIANT" != "$argvariant" ]; then
		die "parsed package variant ($PKGVARIANT) doesn't match given variant ($argvariant)"
	fi

	inspectPackage "$SRCDIR"

	if [ -n "$argvariant" ]; then
		PKGREF="refs/heads/$argname-$argvariant"
	fi
}

parsePackageCommit() {
	local word value rest
	read -r word value rest
	if [ "$word" != "Built" ]; then
		die "invalid package commit subject line: \"$word $value $rest\""
	fi
	echo "PKGBUILT=$value"
	echo "PKGVERSION=$value"

	while read -r word value; do
		case "$word" in
		Package:)
			echo "PKGNAME=$value"
			;;
		Variant:)
			echo "PKGVARIANT=$value"
			;;
		Prefix:)
			echo "PREFIX=$value"
			;;
		Source:)
			echo "SRCDIR=$value"
			;;
		Upstream:)
			echo "PKGURL=$value"
			;;
		Revision:)
			echo "PKGREV=$value"
			;;
		Script:)
			break
			;;
		esac
	done
}

pkgit() {
	[ -d "$PKGDIR" ] || GIT_OBJECT_DIRECTORY="$PKGREPO/objects" setupSubRepo
	GIT_OBJECT_DIRECTORY="$PKGREPO/objects" git --git-dir="$PKGDIR" "$@"
}

setupSubRepo() {
	git init --bare "$PKGDIR"
	rm -rf "$PKGDIR"/{hooks/*,objects}
	git --git-dir="$PKGDIR" symbolic-ref HEAD "refs/heads/$PKGNAME"
}

priorBuild() {
	ref=${1:-$PKGREF}
	echo "## prior build script from $ref"
	echo ""
	pkgit show "$ref" -s --pretty='commit %h%d%ntree %t%nAuthored by %an <%ae> at %ai%nCommitted by %cn <%ce> at %ci%nSubject: %B' \
	| awk 'BEGIN { prefix="## " }; { print prefix $0; if (match($0, "Script:") == 1) {prefix=""} }'
	echo ""
	echo "## NOTE: you may add any number \`shell\` lines to drop into a shell within"
	echo "##       the build environment; any commands executed within it are captured"
	echo "##       for the final build script."
	echo ""
	dumpVars | sed -e 's/^/## /'
}

withBuild() {
	if [ -n "$PKGIT_DRYRUN" ]; then
		if [ "$1" == "bash" ] && [ $# -eq 2 ]; then
			echo cd "$BUILDDIR" '&& {'
			sed -e 's/^/  /' "$2"
			echo '}'
		else
			echo cd "$BUILDDIR" '&&' "$@"
		fi
		return
	fi
	export BUILDDIR DESTDIR PKGNAME PKGREPO PKGBUILT PKGVERSION PREFIX SRCDIR
	cd "$BUILDDIR"
	"$@"
}

commitMess() {
	cat <<-EOM
	Built $PKGVERSION

	Package: $PKGNAME
	Variant: $PKGVARIANT
	Prefix: $PREFIX
	Source: $SRCDIR
	Upstream: $PKGURL
	Revision: $PKGREV

	Script:
	$(grep -v '^##' "$BUILDSCRIPT")
	EOM

	if line=$(pkgit show --pretty='%b' | grep -o 'Revision: .*') && [[ $line = Revision:\ * ]]; then
		priorrev=${line#* }
		cat <<-EOM

		# Changes since $priorrev:
		$(git --git-dir="$SRCDIR/.git" log --pretty='- %s' --no-decorate --first-parent "$priorrev..$PKGREV")
		EOM
	fi

	cat <<-EOM

	# Diff Stat:
	$(pkgit diff --cached --stat | sed -e 's/^/# /')
	EOM
}

historyBuild() {
	# TODO stop using diff
	cat <<EOM
# Session shell history:
# TODO: curate this, as it will be used as a rebuild script later!
$(if [ -f "$BUILDHISTORY.prior" ]; then
	diff "$BUILDHISTORY"{.prior,} | grep '^> ' | cut -c 3-
else
	cat -u "$BUILDHISTORY"
fi)
EOM
}

doBuild() {
	pkgit symbolic-ref HEAD "$PKGREF"

	if [ -n "$PKGIT_DRYRUN" ]; then
		echo "Dry Run Build Variables:"
		dumpVars
	fi

	mkdir -p "$PKGDIR"
	mkdir -p "$BUILDDIR"

	prior=$1

	if [ -z "$prior" ] && pkgit rev-parse --verify -q "$PKGREF" >/dev/null; then
		priorBuild "$PKGREF" >"$BUILDSCRIPT"
		prior="$BUILDSCRIPT"
	fi

	steps=()

	if [ -n "$prior" ]; then
		if [ "$prior" != "$BUILDSCRIPT" ]; then
			if [ -f "$prior" ]; then
				cp "$prior" "$BUILDSCRIPT"
			else
				priorBuild "$prior" >"$BUILDSCRIPT"
			fi
		fi
		"$EDITOR" "$BUILDSCRIPT"

		rm -f "$BUILDSCRIPT".*
		awk -f - "$BUILDSCRIPT" <<- EOA
			BEGIN {n=0; of="$BUILDSCRIPT.0"} {
				if (match(\$0, "shell") == 1) {of=sprintf("$BUILDSCRIPT.%d", ++n); print "" > of}
				else if (match(\$0, "##") != 1) {print > of} }
			EOA

		i=0
		while [ -f "$BUILDSCRIPT.$i" ]; do
			steps+=("$BUILDSCRIPT.$i")
			i=$(( i + 1 ))
		done
	fi

	if [ -f "$BUILDHISTORY" ]; then
		cp "$BUILDHISTORY"{,.prior}
	fi

	if [ -f "$BUILDSCRIPT.log" ]; then
		rm "$BUILDSCRIPT.log"
	fi
	i=0
	for step in "${steps[@]}"; do
		if [ $i -gt 0 ]; then
			doInteract
		fi
		cat "$step" >> "$BUILDHISTORY"
		withBuild bash "$step" 2>&1 | tee -a "$BUILDSCRIPT.log"
		i=$(( i + 1 ))
	done
	if [ $i -eq 0 ]; then
		doFirstInteract
	fi

	# TODO variant activation script
	# if [ -n "$PKGVARIANT" ] && ! [ -f "$DESTDIR/$PREFIX/bin/activate" ]; then
	# 	cat >"$DESTDIR/$PREFIX/bin/activate" <<-EOF
	# 	NEWPATH=$PREFIX/bin:\$PATH
	# 	# export PATH
	# 	EOF
	# fi

	# TODO when does variant need to be in tag name?
	tag=$PKGNAME-$PKGVERSION

	# if [ -n "$PKGVARIANT" ]; then
	# fi

	if [ -n "$PKGIT_DRYRUN" ]; then
		echo "# would add, commit, and tag $tag"
	else
		historyBuild >"$BUILDSCRIPT"
		tree="$DESTDIR/$PREFIX"
		cd "$tree"
		GIT_WORK_TREE="$tree" pkgit add .
		commitMess | GIT_WORK_TREE="$tree" pkgit commit -e -F -
		git --git-dir="$PKGREPO" tag -f "$tag" "$(pkgit rev-parse "$PKGREF")"
	fi
}

doFirstInteract() {
	if [ -n "$PKGIT_DRYRUN" ]; then
		echo "# would drop into initial build shell"
		return
	fi
	cat <<-EOF
	Dropping into build shell, salient variables:
	$(dumpVars)

	If the project uses standard autotools, a good start:

	    \$SRCDIR/configure
	    make
	    make install

	If the project uses cmake, try:

	    cmake \$SRCDIR
	    make

	Finally, try to do an "out-of-tree" build, but if you want/need the source:

	    git --git-dir="\$SRCDIR/.git" archive HEAD | tar -x
	EOF
	HISTFILE="$BUILDHISTORY" withBuild bash
}

doInteract() {
	if [ -n "$PKGIT_DRYRUN" ]; then
		echo "# would drop into build shell"
		return
	fi
	cat <<-EOF
	Dropping into build shell, salient variables:
	$(dumpVars)

	NOTE: any prior build commands are available in history
	EOF
	HISTFILE="$BUILDHISTORY" withBuild bash
}

dumpVars() {
	{
		echo "  VAR=description=value"
		echo "  SRCDIR=Package Source Directory=$SRCDIR"
		echo "  PKGNAME=Package Name=$PKGNAME"
		echo "  PKGBUILT=Last Built Package Version=$PKGBUILT"
		echo "  PKGVERSION=Package Version=$PKGVERSION"
		echo "  BUILDDIR=Build Scratch Directory=$BUILDDIR"
		echo "  PREFIX=Target Installation Directory=$PREFIX"
		echo "  DESTDIR=Install Destination Directory=$DESTDIR"
	} | column -ts=
}

doInstall() {
	local ref target
	ref="$PKGNAME-$PKGBUILT"
	target="${PREFIX#$PKGROOT/}"

	cd "$PKGROOT"

	if [ -d "$target" ]; then
		git merge -X subtree="$target/" --no-commit "$ref"
	else
		git rev-parse "$ref" >.git/MERGE_HEAD
		git read-tree -v -u --prefix="$target/" MERGE_HEAD
	fi

	if checkLinks; then
		makeLinks
		for n in "$PREFIX/bin/"*; do
			git add "${n#$PREFIX/}"
		done
	else
		echo "Not linking due to conflict, run \`pkgit link $PKGNAME $PKGVARIANT\` to force."
	fi

	{
		cat <<-EOM
		Install $ref

		Package: $PKGNAME
		Variant: $PKGVARIANT
		Version: $PKGBUILT
		Prefix: $PREFIX
		Source: $SRCDIR
		Upstream: $PKGURL
		Revision: $PKGREV
		EOM
	} >.git/MERGE_MSG

	git commit
}

checkLinks() {
	local bin target
	rc=0
	for n in "$PREFIX/bin/"*; do
		bin=$PKGROOT/${n#$PREFIX/}
		[ -e "$bin" ] || continue
		target=$(readlink "$bin")
		if [ "$target" != "../${n#$PKGROOT/}" ]; then
			echo "conflicting ${n#$PREFIX/} => $target"
			rc=1
		fi
	done
	return $rc
}

makeLinks() {
	# TODO upgrade to an "ensureLinks" or "updateLinks" based on commit
	# history that can remove obsolete links
	[ -d "$PKGROOT/bin" ] || mkdir -p "$PKGROOT/bin"
	for n in "$PREFIX/bin/"*; do
		ln -nsf "../${n#$PKGROOT/}" "$PKGROOT/${n#$PREFIX/}"
	done
}

doLink() {
	makeLinks
	cd "$PKGROOT"
	for n in "$PREFIX/bin/"*; do
		git add "${n#$PREFIX/}"
	done
	git commit -m "Link $PKGNAME-$PKGVARIANT"
}

PKGROOT=$(dirname "$0")
if [[ $PKGROOT = */bin ]]; then
	PKGROOT=${PKGROOT%/bin}
fi
if [ "$PKGROOT" = "$HOME" ]; then
	PKGROOT=$HOME/.local
fi

PKGREPO=$PKGROOT/.git
if ! [ -d "$PKGREPO" ]; then
	pushd "$PKGREPO"
	git init
	rm -f .git/hooks/*.hook
	git commit --allow-empty -m 'Initial Commit Left Intentionally Empty'
	echo "Initialized an empty git repository in $PKGROOT; consider addressing any"
	echo "prior content (commit it, or commit some gitignores for it)." popd
	popd
fi

case "$1" in
help)
	printHelp "$@"
	exit 0
	;;

# package management command
install|link|upgrade|build-script|build|truncate|rm|clean|vars)
	cmd=$1
	shift

	if [ $# -eq 0 ]; then
		inspectPackage "$(pwd)"
	else
		lookupPackage "$@"
	fi

	BUILDDIR=$PKGDIR/build-$PKGVERSION
	DESTDIR=$BUILDDIR/.install
	BUILDSCRIPT=$BUILDDIR/.build.bash
	BUILDHISTORY=$BUILDDIR/.history

	case "$cmd" in
	install)
		doInstall
		;;

	link)
		doLink
		;;

	upgrade)
		cd "$SRCDIR"
		if upstream_ref=$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}' 2>/dev/null); then
			echo "Pulling upstream $upstream_ref"
			git pull
		fi
		inspectPackage "$SRCDIR"
		if [ "$PKGVERSION" == "$PKGBUILT" ]; then
			echo "Nothing to upgrade: $PKGNAME-$PKGVERSION already built."
		else
			doBuild
			inspectPackage "$SRCDIR"
			doInstall
		fi
		;;

	build-script)
		priorBuild "$1"
		;;

	build)
		doBuild "$@"
		;;

	truncate)
		# TODO support N-back truncation
		tree=$(pkgit rev-parse "$PKGREF":)
		commit=$(pkgit show -s --pretty=%B "$PKGREF" | pkgit commit-tree "$tree" -F -)
		tag=$PKGNAME-$PKGVERSION
		pkgit update-ref "$PKGREF" "$commit" -m "pkgit truncate"
		git --git-dir="$PKGREPO" tag -f "$tag" "$commit"
		;;

	rm)
		rm -rf "$PKGDIR"
		;;

	clean)
		rm -rfv "$PKGDIR"/build-* "$DESTDIR"
		;;

	vars)
		echo "SRCDIR=$SRCDIR"
		echo "PKGDIR=$PKGDIR"
		echo "PKGNAME=$PKGNAME"
		echo "PKGURL=$PKGURL"
		echo "PKGREV=$PKGREV"
		echo "PKGVERSION=$PKGVERSION"
		echo "PKGVARIANT=$PKGVARIANT"
		echo "PKGREF=$PKGREF"
		echo "PREFIX=$PREFIX"
		echo "BUILDDIR=$BUILDDIR"
		echo "BUILDHISTORY=$BUILDHISTORY"
		echo "BUILDSCRIPT=$BUILDSCRIPT"
		echo "DESTDIR=$DESTDIR"
		;;

	esac
	;;

# pass through to repository git
repogit)
	shift
	cd "$PKGROOT"
	git --git-dir="$PKGREPO" "$@"
	;;

# default pass through to package git
*)
	inspectPackage "$(pwd)"
	if [ $# -gt 0 ]; then
		pkgit "$@"
	else
		doBuild
	fi
	;;
esac
