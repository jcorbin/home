#!/bin/bash
set -e

# A Less Crude Personal Package Manager
# http://nullprogram.com/blog/2018/03/27/
# FIXME documentation / help / etc

PREFIX=$(dirname "$0")
if [[ $PREFIX = */bin ]]; then
    PREFIX=${PREFIX%/bin}
fi
if [ "$PREFIX" = "$HOME" ]; then
    PREFIX=$HOME/.local
fi

# TODO implement install/upgrade side
# cd $PREFIX
# git remote add pkg $PKGREPO
# git fetch pkg
# git merge --allow-unrelated-histories pkg/neovim

PKGREPO=$PREFIX/.git
if ! [ -d "$PKGREPO" ]; then
    git init --bare "$PKGREPO"
    rm -f "$PKGREPO"/hooks/*.hook
fi

SRCDIR=$(pwd)
PKGNAME=$(basename "$SRCDIR")

PKGHEAD=$(basename "$(git --git-dir="$SRCDIR/.git" symbolic-ref HEAD 2>/dev/null)") || true
PKGREMOTE=$(git --git-dir="$SRCDIR/.git" config "branch.${PKGHEAD:-master}.remote" 2>/dev/null) || true
PKGURL=$(git --git-dir="$SRCDIR/.git" config "remote.${PKGREMOTE:-origin}.url")
PKGREV=$(git --git-dir="$SRCDIR/.git" rev-parse HEAD)
PKGDESC=$(git --git-dir="$SRCDIR/.git" describe --all --always "$PKGREV")

PKGVERSION=${PKGDESC##*/}
PKGREF="refs/heads/$PKGNAME"
PKGDIR=$PKGREPO/pkg/$PKGNAME
BUILDDIR=$PKGDIR/build-$PKGVERSION
DESTDIR=$PKGDIR/install-$PKGVERSION
PKGSUBREPO=$PKGDIR/.git

pkgit() {
    [ -d "$PKGSUBREPO" ] || GIT_OBJECT_DIRECTORY="$PKGREPO/objects" setupSubRepo
    GIT_OBJECT_DIRECTORY="$PKGREPO/objects" git --git-dir="$PKGSUBREPO" "$@"
}

setupSubRepo() {
    git init --bare "$PKGSUBREPO"
    rm -rf "$PKGSUBREPO"/{hooks/*,objects}
    git --git-dir="$PKGSUBREPO" symbolic-ref HEAD "$PKGREF"
}

priorBuild() {
    echo "## commit $(pkgit rev-parse "$PKGREF") from $PKGREF"
    pkgit cat-file commit "$PKGREF" \
    | awk 'BEGIN { prefix="## " }; { print prefix $0; if (match($0, "Script:") == 1) {prefix=""} }'
}

withBuild() {
    export BUILDDIR DESTDIR PKGNAME PKGREPO PKGREF PKGVERSION PREFIX SRCDIR
    mkdir -p "$BUILDDIR"
    cd "$BUILDDIR"
    "$@"
}

commitMess() {
    cat <<EOM
Built $PKGVERSION

Source: $SRCDIR
Upstream: $PKGURL
Revision: $PKGREV

Script:
$(grep -v '^## ' "$PKGDIR/build.bash")

# Diff Stat:
$(pkgit diff --cached --stat | sed -e 's/^/# /')
EOM
}

historyBuild() {
    cat <<EOM
# Session shell history:
# TODO: curate this, as it will be used as a rebuild script later!
$(if [ -f "$PKGDIR/history.prior" ]; then
    diff "$PKGDIR/history"{.prior,} | grep '^> ' | cut -c 3-
else
    cat -u "$PKGDIR/history"
fi)
EOM
}

doCommit() {
    cd "$DESTDIR/$PREFIX"
    GIT_WORK_TREE="$DESTDIR/$PREFIX" pkgit add .
    commitMess | GIT_WORK_TREE="$DESTDIR/$PREFIX" pkgit commit -e -F -
    git --git-dir="$PKGREPO" tag -f "$PKGNAME-$PKGVERSION" "$(pkgit rev-parse HEAD)"
}

doExec() {
    export HISTFILE="$PKGDIR/history"
    echo "$@" >>"$PKGDIR/history"
    withBuild "$@"
}

doBuild() {
    if [ -n "$1" ]; then
        cat "$1" >> "$PKGDIR/history"
        withBuild bash "$1" 2>&1 | tee "$PKGDIR/build.log"
    fi

    [ -d "$PKGDIR" ] || mkdir -p "$PKGDIR"
    if [ -f "$PKGDIR/history" ]; then
        cp "$PKGDIR/history"{,.prior}
    fi

    echo "Dropping into shell for build, salient variables:"
    {
        echo "  VAR=description=value"
        echo "  SRCDIR=Package Source Directory=$SRCDIR"
        echo "  PKGNAME=Package Name=$PKGNAME"
        echo "  PKGVERSION=Package Version=$PKGVERSION"
        echo "  BUILDDIR=Build Scratch Directory=$BUILDDIR"
        echo "  PREFIX=Target Installation Directory=$PREFIX"
        echo "  DESTDIR=Install Destination Directory=$DESTDIR"
    } | column -ts=

    if pkgit rev-parse --verify -q "$PKGREF" >/dev/null; then
        echo "Last Commit:"
        pkgit show -s "$PKGREF" | sed -e 's/^/  /'
    fi

    HISTFILE="$PKGDIR/history" withBuild bash
    historyBuild >"$PKGDIR/build.bash"
    doCommit
}

doRebuild() {
    if [ -n "$1" ]; then
        cp "$1" "$PKGDIR/build.bash"
    else
        priorBuild >"$PKGDIR/build.bash"
    fi

    "$EDITOR" "$PKGDIR/build.bash"
    withBuild bash "$PKGDIR/build.bash" 2>&1 | tee "$PKGDIR/build.log"
    doCommit
}

case "$1" in
exec)
    shift
    doExec "$@"
    ;;

build-script)
    priorBuild
    ;;

build)
    shift
    doBuild "$@"
    ;;

rebuild)
    shift
    doRebuild "$@"
    ;;

commit)
    doCommit
    ;;

rm)
    rm -rf "$PKGDIR"
    ;;

clean)
    rm -rf "$BUILDDIR" "$DESTDIR"
    ;;

*)
    if [ $# -gt 0 ]; then
        pkgit "$@"
    elif pkgit rev-parse --verify -q "$PKGREF" >/dev/null; then
        doRebuild
    else
        doBuild
    fi
    ;;
esac
