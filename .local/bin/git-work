#!/bin/sh

# git-work: smarter workflow management with git

# The pain:
# - You have a setup of local changes that need to be maintained for the
#   repository to work on your machine, but never want to send them back
#   upstream.
# - You need to work on multiple topics, and want to keep your changes for each
#   topic contained.
# - Once you have developed a topic and want to merge it back into master (either
#   to test with other topics or in order to push to upstream) you need to merge
#   just the non local commits from the given topic branch, and then rebase your
#   local and other topic branches against this new master.
# - You've been working on a topic, and have made many fixes accross the code,
#   you'd like to send those fixes upstream and either:
#     1) hold back the topic changes or
#     2) send fixes first so that the functionality changes in the topic branch
#        are clearer.
#
# All of the above cases require a series of git commands that, while not
# difficult to remember and apply, can prove tricky and tedious.

# Usage scenario:
#   git clone <some-repo>
#   cd <some-repos-dir>
#   git work setup
#     Switched to branch "local"
#   <... make necessary local changes and commit ...>

#   git work on some-issue
#     Switched to branch "some-issue"
#   <... work on things and make commits ...>

#   git work on fixes-for-upstream
#     Switched to branch "fixes-for-upstream"
#   git work log some-issue # to see what's been done for some-issue since local
#   git cherry-pick <fix-commit>
#   <... pick any other fixes ...>
#   git work merge
#   <... now on master ...>
#   git branch -D fixes-for-upstream # since the merge went ok

#   git work on some-issue
#     Switched to branch "some-issue"
#   git work update # or 'git work up' for short
#     # This first switches to the local branch and rebases off master,
#     # then switches back to some-issue and rebases off local,
#     # if the working tree is dirty, it stashes changes away and applies them
#     # back in the end if everything goes ok
#   git work squash
#     # this is the same as git work merge except all of topic's commits will be
#     # flattened into one commit on master, the commit message will be opened
#     # for editing right before the end.


# Hooks:
#   In order if they exist:
#     $GIT_DIR/hooks/work-setup
#     $GIT_WORK_TREE/devel/local-setup
#     $GIT_WORK_TREE/local-setup
#   are run to setup the local branch
#
#   $GIT_DIR/hooks/work-topic-setup:
#     ran by git work on <topic> when initially setting up the topic branch
#
#   $GIT_DIR/hooks/work-topic-change:
#     ran by git work on <topic>, intended for state and time tracking puposes, see below

# TODO:
#   leverage work on concept for time tracking and online presence purposes:
#     add pause command, ties into hook
#     somehow augment commit generation to append timing information

set -e

USAGE="[list]
   or: git work setup
   or: git work update [<topic>]
   or: git work on <topic> [<base=local>]
   or: git work log [<topic>]
   or: git work merge|squash [<commitsh=HEAD>]
   or: git work merge|squash <from> <to>
   or: git work continue|abort"
LONG_USAGE="Commands
    list      without a command or when command is 'list', shortcut for branch -v currently
    setup     sets up the local working environment
    update    merges changes from mater through local into the topic
    on        switches to and possibly creates a topic work branch
    log       shows changes between local and the topic branch
    merge     merges changes back to master from a topic branch
    squash    same as above, except flattens all topic branch commits into one commit on master
    continue  continues the last merge or update, likely due to a dicey rebase
    abort     abort what continue would carry on"

. "$(git --exec-path)/git-sh-setup"

require_work_tree

local=$(git config work.local || true)
if [ -z "$local" ]; then
	local=local
	git config work.local $local
fi

require_local_branch() {
	if ! git rev-parse --verify -q $local >/dev/null; then
		setup_local_branch
	fi
}

require_clean_tree() {
	if ! git diff --quiet; then
		die "git work: tree not clean, stash or commit first"
	fi
	if ! git diff --cached --quiet; then
		die "git work: staged changes exist, commit first"
	fi
	return 0
}

setup_local_branch() {
	require_clean_tree

	git branch --track $local master
	git config branch.$local.rebase true
	git checkout $local

	for hook in $GIT_DIR/hooks/work-setup ./devel/local-setup ./local-setup; do
		if [ -x $hook ]; then
			if ! $hook; then
				die "git work setup: hook($hook) failed, you get to keep both pieces"
			fi
		fi
	done

	return 0
}

setup_topic() {
	branch=$1
	base=$2
	git branch --track $branch $base
	git config branch.$branch.rebase true
	if [ -x $GIT_DIR/hooks/work-topic-setup ]; then
		if ! $GIT_DIR/hooks/work-topic-setup $branch $base; then
			echo "git work: work-topic-setup hook failed, good luck with that" >&2
		fi
	fi
}

rebase_check() {
	rebase_state=
	for d in "$GIT_DIR"/rebase-merge "$GIT_DIR"/rebase-apply; do
		if [ -z "$rebase_state" ] && [ -d $d ]; then
			rebase_state=$d
		fi
	done
}

merge_topic() {
	rebase_check
	if [ -f $state/merge_topic_tip ]; then
		tip=$(cat $state/merge_topic_tip || true)
		tip_name=$(cat $state/merge_topic_tip_name || true)
		merge=$(cat $state/merge_work || true)
		upstream=$(cat $state/merge_topic_upstream || true)
		if [ -z "$tip" ] || [ -z "$tip_name" ] || [ -z "$merge" ]; then
			die "git work $cmd: incomplete merge_topic state"
		fi
		if [ -n "$rebase_state" ]; then
			if ! git rebase --continue; then
				die "git work $cmd: failed to continue rebase"
			fi
		fi
	else
		[ -n "$rebase_state" ] && die "git work $cmd: rebase in progress"

		if [ -z "$2" ]; then
			tip=$1
		else
			upstream=$1
			tip=$2
		fi

		if [ -z "$tip" ]; then
			tip=$(git rev-parse HEAD)
			tip_name=$(git symbolic-ref HEAD 2>/dev/null || git name-rev --always --name-only HEAD)
			tip_name=${tip_name##*/}
		else
			tip_name=$1
			tip=$(git rev-parse $tip)
		fi

		if [ -z "$upstream" ]; then
			upstream=$(git config branch.$tip_name.merge 2>/dev/null)
			if [ $? -ne 0 ] || [ -z "$upstream" ]; then
				upstream=$local
			fi
		fi

		merge=work-merge

		echo $tip > $state/merge_topic_tip
		echo $tip_name > $state/merge_topic_tip_name
		echo $upstream > $state/merge_topic_upstream
		echo $merge > $state/merge_work

		if git rev-parse --verify -q $merge > /dev/null; then
			die "git work $cmd: branch ($merge) already exists, finish with that first"
		fi

		git checkout --no-track -b $merge $tip
		if ! git rebase --onto master $upstream $merge; then
			rebase_check
			[ -n "$rebase_state" ] || die "git work $cmd: rebase failed, you get to keep both pieces"
		else
			rebase_check
		fi

		if [ -n "$rebase_state" ]; then
			echo "Non-automatic rebase, fix then run git work continue"
			suspend 0
		fi
	fi
}

cmd_list() {
	git branch -v
}

cmd_setup() {
	if git rev-parse --verify -q $local >/dev/null; then
		if [ "$cmd" = "resetup" ]; then
			git checkout -f master
			git branch -D local
		else
			echo "local working branch ($local) already setup"
			exit 0
		fi
	fi
	setup_local_branch
}

cmd_on() {
	topic=$1
	if [ -z "$topic" ]; then
		echo "Missing topic argument" >&2
		usage
	fi
	shift
	require_local_branch
	require_clean_tree
	if ! git rev-parse --verify -q $topic >/dev/null; then
		if [ -n "$1" ]; then
			setup_topic $topic $1
		else
			setup_topic $topic $local
		fi
	fi
	git checkout $topic
	if [ -x $GIT_DIR/hooks/work-topic-change ]; then
		if ! $GIT_DIR/hooks/work-topic-change $topic; then
			echo "git work: work-topic-change hook failed, oh well" >&2
		fi
	fi
}

cmd_continue() {
	if ! [ -d $state ] || ! [ -f $state/command ]; then
		die "git work $cmd: can't continue"
	fi
	old_cmd=$cmd
	continue_cmd=$(cat $state/command || true)
	do_cmd $continue_cmd $@ || \
		die "git work $old_cmd: bogus state command"
	exit 0
}

cmd_abort() {
	rm -rf $state
	exit 0
}

cmd_merge() {
	merge_topic $@
	git checkout master
	git merge $merge
	git branch -D $merge
}

cmd_squash() {
	merge_topic $@
	if [ -f $SQUASH_MSG ]; then
		rm -f $SQUASH_MSG;
	fi
	make_squash_message $local $tip $tip_name > $SQUASH_MSG
	git checkout master
	git merge --squash $merge
	git branch -D $merge
	git commit -e -F $SQUASH_MSG
	rm -f $SQUASH_MSG
}

cmd_log() {
	require_local_branch
	tip=$1
	if [ -z "$tip" ]; then
		tip=HEAD
	fi
	git log --pretty=oneline $local..$tip
}

cmd_update() {
	rebase_check
	[ -n "$rebase_state" ] && die "git work $cmd: rebase in progress"

	stack=$state/update_rebase
	if [ -f $state/update_old_head ]; then
		if [ -n "$rebase_state" ]; then
			if ! git rebase --continue; then
				die "git work $cmd: failed to continue rebase"
			fi
		fi
		old_head=$(cat $state/update_old_head)
		stashed=$(cat $state/update_stashed)
	else
		[ -n "$rebase_state" ] && die "git work $cmd: rebase in progress"

		if ! git diff --quiet || ! git diff --cached --quiet; then
			stash_mess=work-update-stash-$(git rev-parse $old_head)
			git stash save "$stash_mess"
			stashed=$(git stash list | grep "$stash_mess" | cut -d: -f1)
			[ -z "$stashed" ] && die "git work update: unable to stash changes away, scary shit"
		fi
		echo $stashed > $state/update_stashed

		if [ -n $1 ]; then
			git checkout $1
		fi

		old_head=$(git symbolic-ref HEAD 2>/dev/null || true)
		if [ -n "$old_head" ]; then
			old_head=${old_head##*/}
		else
			old_head=$( git rev-parse HEAD || true)
			[ -z "$old_head" ] && die "git work $cmd: wtf is HEAD"
		fi
		echo $old_head > $state/old_head

		br=$(git symbolic-ref HEAD);
		br=${br##*/}
		while [ $(git config branch.$br.remote) = "." ]; do
		 base=$(git config branch.$br.merge)
		 base=${base##*/}
		 echo $base $br >> $stack
		 br=$base
		done
		tac $stack > $stack.new
		rm $stack
		mv $stack.new $stack
	fi

	while [ -f $stack ]; do
		line=$(head -n1 $stack)
		if [ -z "$line" ]; then
			rm -f $stack
		else
			tail -n+2 $stack > $stack.new
			mv $stack.new $stack
			if ! git rebase $line; then
				rebase_check
				[ -n "$rebase_state" ] || die "git work $cmd: rebase $line failed"
			else
				rebase_check
			fi
			if [ -n "$rebase_state" ]; then
				echo "Non-automatic rebase, fix then run git work continue"
				suspend 0
			fi
		fi
	done

	if [ -n "$stashed" ]; then
		git stash pop --index $stashed
	fi
}

do_cmd() {
	cmd=$1
	shift

	case "$cmd" in
		cont*)
			cmd_continue $@
			;;
		abort)
			cmd_abort $@
			;;
	esac

	[ -z "$continue_cmd" ] && [ -d $state ] && \
		die "git work $cmd: pre-existing state, abort or continue first"
	[ -d $state ] || mkdir $state || \
		die "git work $cmd: unable to create $state"

	echo $cmd > $state/command
	case "$cmd" in
		list)
			cmd_list $@
			;;
		resetup|setup)
			cmd_setup $@
			;;
		on)
			cmd_on $@
			;;
		merge)
			cmd_merge $@
			;;
		squash)
			cmd_squash $@
			;;
		log)
			cmd_log $@
			;;
		up|update)
			cmd_update $@
			;;
		*)
			return 1
			;;
	esac

	return 0
}

nth_string () {
	case "$1" in
	*1[0-9]|*[04-9]) echo "$1"th;;
	*1) echo "$1"st;;
	*2) echo "$1"nd;;
	*3) echo "$1"rd;;
	esac
}

SQUASH_MSG="$GIT_DIR/"git-work-squash-message
make_squash_message() {
	from=$1
	to=$2
	to_name=$3

	echo "# This is a squashed topic branch of $from..$to_name"

	COUNT=0
	for sha1 in $(git rev-list --reverse $from..$to); do
		COUNT=$(($COUNT+1))
		echo
		echo "# This is the $(nth_string $COUNT) commit message:"
		git cat-file commit $sha1 | sed -e '1,/^$/d'
	done
}

export GIT_DIR
export GIT_OBJECT_DIRECTORY
export WORK_BRANCH_LOCAL=$local

if [ -n "$1" ]; then
	cmd=$1
	shift
else
	cmd='list'
fi

state="$GIT_DIR"/git-work-state
keep_state=0

trap cleanup INT TERM EXIT
cleanup() {
	if [ $keep_state -eq 0 ]; then
		[ -d $state ] && rm -rf $state
	fi
}

suspend() {
	keep_state=1
	exit $1
}

do_cmd $cmd $@ || usage
