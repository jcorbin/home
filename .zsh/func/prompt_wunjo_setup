# wunjo prompt theme

autoload -U zgitinit
zgitinit

prompt_wunjo_help () {
  cat <<'EOF'

  prompt wunjo

EOF
}

revstring() {
  local desc=$(git describe --tags --always $1 2>/dev/null)
  if [ $? -eq 0 ]; then
    if [ $(( 100 * ${#desc} / $COLUMNS )) -le 20 ]; then
      echo $desc
      return
    fi
  fi
  git rev-parse --short $1 2>/dev/null
}

prompt_wunjo_setup() {
  local verbose
  if [[ $TERM == screen* ]] && [ -n "$STY" ]; then
    verbose=
  elif [[ $TERM == tmux* ]] && [ -n "$TMUX" ]; then
    verbose=
  else
    verbose=1
  fi

  local -A classic_colors
  classic_colors[black]="30"
  classic_colors[red]="31"
  classic_colors[green]="32"
  classic_colors[yellow]="33"
  classic_colors[blue]="34"
  classic_colors[magenta]="35"
  classic_colors[cyan]="36"
  classic_colors[white]="37"
  classic_colors[default]="0"

  local -A darkula_colors
  darkula_colors[default]="0"
  darkula_colors[black]="38;2;0;0;0"                 # BLACK           #000000
  darkula_colors[darker_grey]="38;2;18;18;18"        # DARKER_GREY     #121212
  darkula_colors[dark_grey]="38;2;38;38;38"          # DARK_GREY       #262626
  darkula_colors[grey]="38;2;68;68;68"               # GREY            #444444
  darkula_colors[light_grey]="38;2;88;88;88"         # LIGHT_GREY      #585858
  darkula_colors[lighter_grey]="38;2;102;102;102"    # LIGHTER_GREY    #666666
  darkula_colors[white]="38;2;192;192;192"           # WHITE           #c0c0c0
  darkula_colors[dark_white]="38;2;158;158;158"      # DARK_WHITE      #9e9e9e
  darkula_colors[blue]="38;2;95;135;175"             # BLUE            #5f87af
  darkula_colors[bright_purple]="38;2;95;0;255"      # BRIGHT_PURPLE   #5f00ff
  darkula_colors[cyan]="38;2;0;215;215"              # CYAN            #00d7d7
  darkula_colors[dark_orange]="38;2;175;95;0"        # DARK_ORANGE     #af5f00
  darkula_colors[dark_sea_green]="38;2;95;135;95"    # DARK_SEA_GREEN  #5f875f
  darkula_colors[green]="38;2;0;175;0"               # GREEN           #00af00
  darkula_colors[light_cyan]="38;2;95;175;175"       # LIGHT_CYAN      #5fafaf
  darkula_colors[magenta]="38;2;255;0;135"           # MAGENTA         #ff0087
  darkula_colors[orange]="38;2;215;135;0"            # ORANGE          #d78700
  darkula_colors[purple]="38;2;135;135;175"          # PURPLE          #8787af
  darkula_colors[red]="38;2;215;0;0"                 # RED             #d70000
  darkula_colors[red_orange]="38;2;175;95;95"        # RED_ORANGE      #af5f5f
  darkula_colors[yellow]="38;2;128;128;0"            # YELLOW          #808000
  darkula_colors[yellow_orange]="38;2;215;175;0"     # YELLOW_ORANGE   #d7af00

  local -A pc
  if [ "$COLORTERM" = "truecolor" ]; then
    pc[default]="\e[$darkula_colors[default]m"
    pc[date]="\e[$darkula_colors[blue]m"
    pc[time]="\e[$darkula_colors[blue]m"
    pc[host]="\e[$darkula_colors[dark_sea_green]m"
    pc[user]="\e[$darkula_colors[blue]m"
    pc[punc]="\e[$darkula_colors[blue]m"
    pc[line]="\e[$darkula_colors[dark_sea_green]m"
    pc[hist]="\e[$darkula_colors[green]m"
    pc[path]="\e[$darkula_colors[blue]m"
    pc[shortpath]="\e[$darkula_colors[blue]m"
    pc[rc]="\e[$darkula_colors[red_orange]m"
    pc[scm_branch]="\e[$darkula_colors[dark_sea_green]m"
    pc[scm_commitid]="\e[$darkula_colors[purple]m"
    pc[scm_status_dirty]="\e[$darkula_colors[red]m"
    pc[scm_status_staged]="\e[$darkula_colors[green]m"
  else
    pc[default]="\e[$classic_colors[default]m"
    pc[date]="\e[$classic_colors[cyan]m"
    pc[time]="\e[$classic_colors[blue]m"
    pc[host]="\e[$classic_colors[green]m"
    pc[user]="\e[$classic_colors[cyan]m"
    pc[punc]="\e[$classic_colors[yellow]m"
    pc[line]="\e[$classic_colors[magenta]m"
    pc[hist]="\e[$classic_colors[green]m"
    pc[path]="\e[$classic_colors[cyan]m"
    pc[shortpath]="\e[$classic_colors[default]m"
    pc[rc]="\e[$classic_colors[red]m"
    pc[scm_branch]="\e[$classic_colors[cyan]m"
    pc[scm_commitid]="\e[$classic_colors[yellow]m"
    pc[scm_status_dirty]="\e[$classic_colors[red]m"
    pc[scm_status_staged]="\e[$classic_colors[green]m"
  fi

  pc[reset]="\e[0m"
  for cn in ${(k)pc}; do
    pc[${cn}]=$(echo "%{"${pc[${cn}]}"%}")
  done

  typeset -Ag wunjo_prompt_colors
  wunjo_prompt_colors=(${(kv)pc})

  local p_date p_line p_rc

  p_date="$pc[date]%D{%Y-%m-%d}$pc[time]T%D{%T%z}$pc[reset]"
  p_line="$pc[line]%y$pc[reset]"
  p_host="$pc[host]%m$pc[reset]"
  p_path="$pc[shortpath]%2~$pc[reset]"
  p_prompt="$pc[punc]%#$pc[reset]"
  p_user="$pc[user]%n$pc[reset]"
  p_exited="%(?.. $pc[rc]exited %1v$pc[reset])"
  p_git="\$(git_desc)"
  p_git_state="\$(prompt_wunjo_scm_status_bit)"

  PROMPT=
  if [ $verbose ]; then
    PROMPT+="$p_date $p_host "
  fi
  PROMPT+="$p_path "
  PROMPT+="$p_git"
  PROMPT+=" $p_git_state$p_prompt "
  export PROMPT

  RPROMPT=
  if [ $verbose ]; then
    RPROMPT+=" $p_user $p_line"
  fi
  RPROMPT+="$p_exited"
  export RPROMPT

  add-zsh-hook precmd prompt_wunjo_precmd
}

prompt_wunjo_precmd() {
  local ex=$?
  psvar=()

  if [[ $ex -ge 128 ]]; then
    sig=$signals[$ex-127]
    psvar[1]="sig${(L)sig}"
  else
    psvar[1]="$ex"
  fi
}

git_desc() {
  zgit_isgit || return
  local -A pc
  pc=(${(kv)wunjo_prompt_colors})

  head=$(zgit_head)
  gitcommit=$(revstring $head)

  if [ -n "$gitcommit" ]; then
    echo -n "$pc[scm_branch]$head$pc[reset] $pc[scm_commitid]$gitcommit$pc[reset]"
  fi
}

prompt_wunjo_scm_status() {
  zgit_isgit || return
  local -A pc
  pc=(${(kv)wunjo_prompt_colors})

  head=$(zgit_head)
  gitcommit=$(revstring $head)

  local -a commits

  if zgit_rebaseinfo; then
    orig_commit=$(revstring $zgit_info[rb_head])
    orig_name=$(git name-rev --name-only $zgit_info[rb_head])
    orig="$pc[scm_branch]$orig_name$pc[punc]($pc[scm_commitid]$orig_commit$pc[punc])"
    onto_commit=$(revstring $zgit_info[rb_onto])
    onto_name=$(git name-rev --name-only $zgit_info[rb_onto])
    onto="$pc[scm_branch]$onto_name$pc[punc]($pc[scm_commitid]$onto_commit$pc[punc])"

    if [ -n "$zgit_info[rb_upstream]" ] && [ $zgit_info[rb_upstream] != $zgit_info[rb_onto] ]; then
      upstream_commit=$(revstring $zgit_info[rb_upstream])
      upstream_name=$(git name-rev --name-only $zgit_info[rb_upstream])
      upstream="$pc[scm_branch]$upstream_name$pc[punc]($pc[scm_commitid]$upstream_commit$pc[punc])"
      commits+="rebasing $upstream$pc[reset]..$orig$pc[reset] onto $onto$pc[reset]"
    else
      commits+="rebasing $onto$pc[reset]..$orig$pc[reset]"
    fi

    local -a revs
    revs=($(git rev-list $zgit_info[rb_onto]..HEAD))
    if [ $#revs -gt 0 ]; then
      commits+="\n$#revs commits in"
    fi

    if [ -f $zgit_info[dotest]/message ]; then
      mess=$(head -n1 $zgit_info[dotest]/message)
      commits+="on $mess"
    fi
  elif [ -n "$gitcommit" ]; then
    commits+="on $pc[scm_branch]$head$pc[punc]$pc[reset]"
    local track_merge=$(zgit_tracking_merge)
    if [ -n "$track_merge" ]; then
      if git rev-parse --verify -q $track_merge >/dev/null; then
        local track_remote=$(zgit_tracking_remote)
        local tracked=$(revstring $track_merge 2>/dev/null)

        local -a revs
        revs=($(git rev-list --reverse $track_merge..HEAD))
        if [ $#revs -gt 0 ]; then
          local base=$(revstring $revs[1]~1)
          local base_name=$(git name-rev --name-only $base)
          local base_short=$(revstring $base)
          local word_commits
          if [ $#revs -gt 1 ]; then
            word_commits='commits'
          else
            word_commits='commit'
          fi

          local conj="since"
          if [[ "$base" == "$tracked" ]]; then
            conj+=" tracked"
            tracked=
          fi
          commits+="$#revs $word_commits $conj $pc[scm_branch]$base_name$pc[punc]($pc[scm_commitid]$base_short$pc[punc])$pc[reset]"
        fi

        if [ -n "$tracked" ]; then
          local track_name=$track_merge
          if [[ $track_remote == "." ]]; then
            track_name=${track_name##*/}
          fi
          tracked=$(revstring $tracked)
          commits+="tracking $pc[scm_branch]$track_name$pc[punc]"
          if [[ "$tracked" != "$gitcommit" ]]; then
            commits[$#commits]+="($pc[scm_commitid]$tracked$pc[punc])"
          fi
          commits[$#commits]+="$pc[reset]"
        fi
      fi
    fi
  fi

  if [ $#commits -gt 0 ]; then
    echo -n " ${(j: :)commits}"
  fi
}

prompt_wunjo_scm_status_bit() {
  zgit_isgit || return
  local -A pc
  pc=(${(kv)wunjo_prompt_colors})

  if zgit_inworktree; then
    if ! zgit_isindexclean; then
      echo -n "$pc[scm_status_staged]+"
    fi

    local -a dirty
    if ! zgit_isworktreeclean; then
      dirty+='!'
    fi

    if zgit_hasunmerged; then
      dirty+='*'
    fi

    if zgit_hasuntracked; then
      dirty+='?'
    fi

    if [ $#dirty -gt 0 ]; then
      echo -n "$pc[scm_status_dirty]${(j::)dirty}"
    fi
  fi

  echo $pc[reset]
}

prompt_wunjo_setup "$@"

# vim:set ft=zsh:
