snippet testtab "test table setup"
	for _, tc := range []struct{
		name string
		${1}
	}{
		${2}
	} {
		${3}
	}

snippet testrun "test sub-run  setup
	t.Run(${1}, func(t *testing.T) {
		${2}
	})

snippet benchtab "bench table setup"
	for _, bc := range []struct{
		name string
		${1}
	}{
		${2}
	} {
		${3}
	}

snippet benchrun "bench sub-run setup"
	b.Run(${1}, func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			${2}
		}
	})

snippet atoi "strconv.Atoi fragment"
	${1:n}, err := strconv.Atoi(${2:token})
	if err != nil {
		return nil, fmt.Errorf("invalid ${3} %q: %v", $2, err)
	}

snippet scan "bufio.Scanner fragment"
	sc := bufio.NewScanner(${1:r})
	// sc.Split(bufio.ScanWords)
	for sc.Scan() {
		${2:token} := sc.Text()
		${0}
	}
	return ${2:ret}, sc.Err()

snippet aoc "main for adventofcode"
	package main

	func main() {
		flag.Parse()
		anansi.MustRun(run(os.Stdin, os.Stdout))
	}

	type ${1:DT} ${2:string}

	func run(in, out *os.File) error {
		${3:data}, err := read(in)
		if err != nil {
			return err
		}

		// part 1
		${0}

		// part 2
		// TODO

		return nil
	}

	func read(r io.Reader) ($3 []$2, _ error) {
		${4:// TODO scan, atoi, app, etc}
	}

snippet app "eponymous append"
	${1:thing}s = append($1s, ${2:$1})

snippet log "log.Printf"
	log.Printf("${1}", ${0})
